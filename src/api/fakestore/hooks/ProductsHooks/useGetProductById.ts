/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { GetProductByIdQueryResponse, GetProductByIdPathParams, GetProductById400 } from '../../types/GetProductById'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getProductByIdQueryKey = (id: GetProductByIdPathParams['id']) => [{ url: '/products/:id', params: { id: id } }] as const

export type GetProductByIdQueryKey = ReturnType<typeof getProductByIdQueryKey>

/**
 * @description Retrieve details of a specific product by ID.
 * @summary Get a single product
 * {@link /products/:id}
 */
export async function getProductById(id: GetProductByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetProductByIdQueryResponse, ResponseErrorConfig<GetProductById400>, unknown>({
    method: 'GET',
    url: `/products/${id}`,
    ...requestConfig,
  })
  return res.data
}

export function getProductByIdQueryOptions(id: GetProductByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getProductByIdQueryKey(id)
  return queryOptions<GetProductByIdQueryResponse, ResponseErrorConfig<GetProductById400>, GetProductByIdQueryResponse, typeof queryKey>({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getProductById(id, config)
    },
  })
}

/**
 * @description Retrieve details of a specific product by ID.
 * @summary Get a single product
 * {@link /products/:id}
 */
export function useGetProductById<
  TData = GetProductByIdQueryResponse,
  TQueryData = GetProductByIdQueryResponse,
  TQueryKey extends QueryKey = GetProductByIdQueryKey,
>(
  id: GetProductByIdPathParams['id'],
  options: {
    query?: Partial<QueryObserverOptions<GetProductByIdQueryResponse, ResponseErrorConfig<GetProductById400>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getProductByIdQueryKey(id)

  const query = useQuery(
    {
      ...getProductByIdQueryOptions(id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetProductById400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}