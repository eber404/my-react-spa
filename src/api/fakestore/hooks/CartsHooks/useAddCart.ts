/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { AddCartMutationRequest, AddCartMutationResponse, AddCart400 } from '../../types/AddCart'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const addCartMutationKey = () => [{ url: '/carts' }] as const

export type AddCartMutationKey = ReturnType<typeof addCartMutationKey>

/**
 * @description Create a new cart.
 * @summary Add a new cart
 * {@link /carts}
 */
export async function addCart(data?: AddCartMutationRequest, config: Partial<RequestConfig<AddCartMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<AddCartMutationResponse, ResponseErrorConfig<AddCart400>, AddCartMutationRequest>({
    method: 'POST',
    url: `/carts`,
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Create a new cart.
 * @summary Add a new cart
 * {@link /carts}
 */
export function useAddCart<TContext>(
  options: {
    mutation?: UseMutationOptions<AddCartMutationResponse, ResponseErrorConfig<AddCart400>, { data?: AddCartMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<AddCartMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? addCartMutationKey()

  return useMutation<AddCartMutationResponse, ResponseErrorConfig<AddCart400>, { data?: AddCartMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return addCart(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}