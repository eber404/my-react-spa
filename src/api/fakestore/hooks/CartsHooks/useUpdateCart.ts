/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { UpdateCartMutationRequest, UpdateCartMutationResponse, UpdateCartPathParams, UpdateCart400 } from '../../types/UpdateCart'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updateCartMutationKey = () => [{ url: '/carts/{id}' }] as const

export type UpdateCartMutationKey = ReturnType<typeof updateCartMutationKey>

/**
 * @description Update an existing cart by ID.
 * @summary Update a cart
 * {@link /carts/:id}
 */
export async function updateCart(
  id: UpdateCartPathParams['id'],
  data?: UpdateCartMutationRequest,
  config: Partial<RequestConfig<UpdateCartMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdateCartMutationResponse, ResponseErrorConfig<UpdateCart400>, UpdateCartMutationRequest>({
    method: 'PUT',
    url: `/carts/${id}`,
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Update an existing cart by ID.
 * @summary Update a cart
 * {@link /carts/:id}
 */
export function useUpdateCart<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateCartMutationResponse,
      ResponseErrorConfig<UpdateCart400>,
      { id: UpdateCartPathParams['id']; data?: UpdateCartMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateCartMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateCartMutationKey()

  return useMutation<
    UpdateCartMutationResponse,
    ResponseErrorConfig<UpdateCart400>,
    { id: UpdateCartPathParams['id']; data?: UpdateCartMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateCart(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}