/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { GetCartByIdQueryResponse, GetCartByIdPathParams, GetCartById400 } from '../../types/GetCartById'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getCartByIdInfiniteQueryKey = (id: GetCartByIdPathParams['id']) => [{ url: '/carts/:id', params: { id: id } }] as const

export type GetCartByIdInfiniteQueryKey = ReturnType<typeof getCartByIdInfiniteQueryKey>

/**
 * @description Retrieve details of a specific cart by ID.
 * @summary Get a single cart
 * {@link /carts/:id}
 */
export async function getCartByIdInfinite(id: GetCartByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetCartByIdQueryResponse, ResponseErrorConfig<GetCartById400>, unknown>({ method: 'GET', url: `/carts/${id}`, ...requestConfig })
  return res.data
}

export function getCartByIdInfiniteQueryOptions(id: GetCartByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getCartByIdInfiniteQueryKey(id)
  return infiniteQueryOptions<GetCartByIdQueryResponse, ResponseErrorConfig<GetCartById400>, GetCartByIdQueryResponse, typeof queryKey>({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getCartByIdInfinite(id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * @description Retrieve details of a specific cart by ID.
 * @summary Get a single cart
 * {@link /carts/:id}
 */
export function useGetCartByIdInfinite<
  TData = InfiniteData<GetCartByIdQueryResponse>,
  TQueryData = GetCartByIdQueryResponse,
  TQueryKey extends QueryKey = GetCartByIdInfiniteQueryKey,
>(
  id: GetCartByIdPathParams['id'],
  options: {
    query?: Partial<InfiniteQueryObserverOptions<GetCartByIdQueryResponse, ResponseErrorConfig<GetCartById400>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getCartByIdInfiniteQueryKey(id)

  const query = useInfiniteQuery(
    {
      ...getCartByIdInfiniteQueryOptions(id, config),
      queryKey,
      ...queryOptions,
    } as unknown as InfiniteQueryObserverOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<GetCartById400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}