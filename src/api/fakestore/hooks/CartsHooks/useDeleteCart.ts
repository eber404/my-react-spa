/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { DeleteCartMutationResponse, DeleteCartPathParams, DeleteCart400 } from '../../types/DeleteCart'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteCartMutationKey = () => [{ url: '/carts/{id}' }] as const

export type DeleteCartMutationKey = ReturnType<typeof deleteCartMutationKey>

/**
 * @description Delete a specific cart by ID.
 * @summary Delete a cart
 * {@link /carts/:id}
 */
export async function deleteCart(id: DeleteCartPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DeleteCartMutationResponse, ResponseErrorConfig<DeleteCart400>, unknown>({
    method: 'DELETE',
    url: `/carts/${id}`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Delete a specific cart by ID.
 * @summary Delete a cart
 * {@link /carts/:id}
 */
export function useDeleteCart<TContext>(
  options: {
    mutation?: UseMutationOptions<DeleteCartMutationResponse, ResponseErrorConfig<DeleteCart400>, { id: DeleteCartPathParams['id'] }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteCartMutationKey()

  return useMutation<DeleteCartMutationResponse, ResponseErrorConfig<DeleteCart400>, { id: DeleteCartPathParams['id'] }, TContext>(
    {
      mutationFn: async ({ id }) => {
        return deleteCart(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}