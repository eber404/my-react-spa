/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { GetUserByIdQueryResponse, GetUserByIdPathParams, GetUserById400 } from '../../types/GetUserById'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getUserByIdInfiniteQueryKey = (id: GetUserByIdPathParams['id']) => [{ url: '/users/:id', params: { id: id } }] as const

export type GetUserByIdInfiniteQueryKey = ReturnType<typeof getUserByIdInfiniteQueryKey>

/**
 * @description Retrieve details of a specific user by ID.
 * @summary Get a single user
 * {@link /users/:id}
 */
export async function getUserByIdInfinite(id: GetUserByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetUserByIdQueryResponse, ResponseErrorConfig<GetUserById400>, unknown>({ method: 'GET', url: `/users/${id}`, ...requestConfig })
  return res.data
}

export function getUserByIdInfiniteQueryOptions(id: GetUserByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getUserByIdInfiniteQueryKey(id)
  return infiniteQueryOptions<GetUserByIdQueryResponse, ResponseErrorConfig<GetUserById400>, GetUserByIdQueryResponse, typeof queryKey>({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUserByIdInfinite(id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * @description Retrieve details of a specific user by ID.
 * @summary Get a single user
 * {@link /users/:id}
 */
export function useGetUserByIdInfinite<
  TData = InfiniteData<GetUserByIdQueryResponse>,
  TQueryData = GetUserByIdQueryResponse,
  TQueryKey extends QueryKey = GetUserByIdInfiniteQueryKey,
>(
  id: GetUserByIdPathParams['id'],
  options: {
    query?: Partial<InfiniteQueryObserverOptions<GetUserByIdQueryResponse, ResponseErrorConfig<GetUserById400>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUserByIdInfiniteQueryKey(id)

  const query = useInfiniteQuery(
    {
      ...getUserByIdInfiniteQueryOptions(id, config),
      queryKey,
      ...queryOptions,
    } as unknown as InfiniteQueryObserverOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<GetUserById400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}