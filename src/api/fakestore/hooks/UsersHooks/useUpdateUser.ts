/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { UpdateUserMutationRequest, UpdateUserMutationResponse, UpdateUserPathParams, UpdateUser400 } from '../../types/UpdateUser'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updateUserMutationKey = () => [{ url: '/users/{id}' }] as const

export type UpdateUserMutationKey = ReturnType<typeof updateUserMutationKey>

/**
 * @description Update an existing user by ID.
 * @summary Update a user
 * {@link /users/:id}
 */
export async function updateUser(
  id: UpdateUserPathParams['id'],
  data?: UpdateUserMutationRequest,
  config: Partial<RequestConfig<UpdateUserMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdateUserMutationResponse, ResponseErrorConfig<UpdateUser400>, UpdateUserMutationRequest>({
    method: 'PUT',
    url: `/users/${id}`,
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Update an existing user by ID.
 * @summary Update a user
 * {@link /users/:id}
 */
export function useUpdateUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateUserMutationResponse,
      ResponseErrorConfig<UpdateUser400>,
      { id: UpdateUserPathParams['id']; data?: UpdateUserMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateUserMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateUserMutationKey()

  return useMutation<
    UpdateUserMutationResponse,
    ResponseErrorConfig<UpdateUser400>,
    { id: UpdateUserPathParams['id']; data?: UpdateUserMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateUser(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}