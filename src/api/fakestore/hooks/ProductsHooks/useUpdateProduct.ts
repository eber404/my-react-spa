/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { UpdateProductMutationRequest, UpdateProductMutationResponse, UpdateProductPathParams, UpdateProduct400 } from '../../types/UpdateProduct'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const updateProductMutationKey = () => [{ url: '/products/{id}' }] as const

export type UpdateProductMutationKey = ReturnType<typeof updateProductMutationKey>

/**
 * @description Update an existing product by ID.
 * @summary Update a product
 * {@link /products/:id}
 */
export async function updateProduct(
  id: UpdateProductPathParams['id'],
  data?: UpdateProductMutationRequest,
  config: Partial<RequestConfig<UpdateProductMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<UpdateProductMutationResponse, ResponseErrorConfig<UpdateProduct400>, UpdateProductMutationRequest>({
    method: 'PUT',
    url: `/products/${id}`,
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Update an existing product by ID.
 * @summary Update a product
 * {@link /products/:id}
 */
export function useUpdateProduct<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateProductMutationResponse,
      ResponseErrorConfig<UpdateProduct400>,
      { id: UpdateProductPathParams['id']; data?: UpdateProductMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateProductMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateProductMutationKey()

  return useMutation<
    UpdateProductMutationResponse,
    ResponseErrorConfig<UpdateProduct400>,
    { id: UpdateProductPathParams['id']; data?: UpdateProductMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateProduct(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}