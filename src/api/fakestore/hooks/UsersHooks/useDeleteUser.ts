/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { DeleteUserMutationResponse, DeleteUserPathParams, DeleteUser400 } from '../../types/DeleteUser'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteUserMutationKey = () => [{ url: '/users/{id}' }] as const

export type DeleteUserMutationKey = ReturnType<typeof deleteUserMutationKey>

/**
 * @description Delete a specific user by ID.
 * @summary Delete a user
 * {@link /users/:id}
 */
export async function deleteUser(id: DeleteUserPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DeleteUserMutationResponse, ResponseErrorConfig<DeleteUser400>, unknown>({
    method: 'DELETE',
    url: `/users/${id}`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Delete a specific user by ID.
 * @summary Delete a user
 * {@link /users/:id}
 */
export function useDeleteUser<TContext>(
  options: {
    mutation?: UseMutationOptions<DeleteUserMutationResponse, ResponseErrorConfig<DeleteUser400>, { id: DeleteUserPathParams['id'] }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteUserMutationKey()

  return useMutation<DeleteUserMutationResponse, ResponseErrorConfig<DeleteUser400>, { id: DeleteUserPathParams['id'] }, TContext>(
    {
      mutationFn: async ({ id }) => {
        return deleteUser(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}