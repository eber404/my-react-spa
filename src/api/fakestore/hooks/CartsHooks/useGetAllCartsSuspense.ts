/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { GetAllCartsQueryResponse, GetAllCarts400 } from '../../types/GetAllCarts'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getAllCartsSuspenseQueryKey = () => [{ url: '/carts' }] as const

export type GetAllCartsSuspenseQueryKey = ReturnType<typeof getAllCartsSuspenseQueryKey>

/**
 * @description Retrieve a list of all available carts.
 * @summary Get all carts
 * {@link /carts}
 */
export async function getAllCartsSuspense(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetAllCartsQueryResponse, ResponseErrorConfig<GetAllCarts400>, unknown>({ method: 'GET', url: `/carts`, ...requestConfig })
  return res.data
}

export function getAllCartsSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getAllCartsSuspenseQueryKey()
  return queryOptions<GetAllCartsQueryResponse, ResponseErrorConfig<GetAllCarts400>, GetAllCartsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getAllCartsSuspense(config)
    },
  })
}

/**
 * @description Retrieve a list of all available carts.
 * @summary Get all carts
 * {@link /carts}
 */
export function useGetAllCartsSuspense<TData = GetAllCartsQueryResponse, TQueryKey extends QueryKey = GetAllCartsSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetAllCartsQueryResponse, ResponseErrorConfig<GetAllCarts400>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getAllCartsSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...getAllCartsSuspenseQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetAllCarts400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}