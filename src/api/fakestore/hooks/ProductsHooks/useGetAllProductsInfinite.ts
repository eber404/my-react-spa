/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { GetAllProductsQueryResponse, GetAllProducts400 } from '../../types/GetAllProducts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getAllProductsInfiniteQueryKey = () => [{ url: '/products' }] as const

export type GetAllProductsInfiniteQueryKey = ReturnType<typeof getAllProductsInfiniteQueryKey>

/**
 * @description Retrieve a list of all available products.
 * @summary Get all products
 * {@link /products}
 */
export async function getAllProductsInfinite(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetAllProductsQueryResponse, ResponseErrorConfig<GetAllProducts400>, unknown>({ method: 'GET', url: `/products`, ...requestConfig })
  return res.data
}

export function getAllProductsInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getAllProductsInfiniteQueryKey()
  return infiniteQueryOptions<GetAllProductsQueryResponse, ResponseErrorConfig<GetAllProducts400>, GetAllProductsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getAllProductsInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * @description Retrieve a list of all available products.
 * @summary Get all products
 * {@link /products}
 */
export function useGetAllProductsInfinite<
  TData = InfiniteData<GetAllProductsQueryResponse>,
  TQueryData = GetAllProductsQueryResponse,
  TQueryKey extends QueryKey = GetAllProductsInfiniteQueryKey,
>(
  options: {
    query?: Partial<InfiniteQueryObserverOptions<GetAllProductsQueryResponse, ResponseErrorConfig<GetAllProducts400>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getAllProductsInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...getAllProductsInfiniteQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as InfiniteQueryObserverOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<GetAllProducts400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}