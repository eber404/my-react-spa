/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../client'
import type { GetAllCartsQueryResponse, GetAllCarts400 } from '../../types/GetAllCarts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getAllCartsQueryKey = () => [{ url: '/carts' }] as const

export type GetAllCartsQueryKey = ReturnType<typeof getAllCartsQueryKey>

/**
 * @description Retrieve a list of all available carts.
 * @summary Get all carts
 * {@link /carts}
 */
export async function getAllCarts(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetAllCartsQueryResponse, ResponseErrorConfig<GetAllCarts400>, unknown>({ method: 'GET', url: `/carts`, ...requestConfig })
  return res.data
}

export function getAllCartsQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getAllCartsQueryKey()
  return queryOptions<GetAllCartsQueryResponse, ResponseErrorConfig<GetAllCarts400>, GetAllCartsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getAllCarts(config)
    },
  })
}

/**
 * @description Retrieve a list of all available carts.
 * @summary Get all carts
 * {@link /carts}
 */
export function useGetAllCarts<TData = GetAllCartsQueryResponse, TQueryData = GetAllCartsQueryResponse, TQueryKey extends QueryKey = GetAllCartsQueryKey>(
  options: {
    query?: Partial<QueryObserverOptions<GetAllCartsQueryResponse, ResponseErrorConfig<GetAllCarts400>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getAllCartsQueryKey()

  const query = useQuery(
    {
      ...getAllCartsQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetAllCarts400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}